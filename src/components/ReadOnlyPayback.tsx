
import React from 'react';
import { getTranslation } from '@/utils/translations';

interface ReadOnlyPaybackProps {
  businessCaseData: {
    resiAnnuali: number;
    resiMensili: number;
    carrelloMedio: number;
  };
  scenarioData: {
    saasFee: number;
    transactionFeeFixed: number;
    rdvPercentage: number;
    upsellingPercentage: number;
  };
  monthlyTotal: number;
  language: string;
}

const ReadOnlyPayback = ({ businessCaseData, scenarioData, monthlyTotal, language }: ReadOnlyPaybackProps) => {
  // Calculate payback period using the EXACT same business logic as BusinessCase.tsx
  const annualReturns = businessCaseData.resiAnnuali > 0 ? businessCaseData.resiAnnuali : businessCaseData.resiMensili * 12;
  
  // Use same effective rates as BusinessCase (no field overrides in read-only)
  const effectiveRdvRate = scenarioData.rdvPercentage / 100;
  const effectiveUpsellingRate = scenarioData.upsellingPercentage / 100;
  
  // Calculate RDV revenue (identical to BusinessCase)
  const rdvResi = annualReturns * effectiveRdvRate;
  const rdvValue = rdvResi * businessCaseData.carrelloMedio;
  
  // Calculate upselling revenue (identical to BusinessCase)
  const upsellingResi = annualReturns * effectiveUpsellingRate;
  const upsellingAOV = businessCaseData.carrelloMedio * 1.3; // 30% increase
  const upsellingValue = upsellingResi * upsellingAOV;
  
  // Net revenue generated by REVER (identical to BusinessCase)
  const fatturazioneGenerataRever = rdvValue + upsellingValue;
  
  // Total platform cost (annual) - identical to BusinessCase
  const saasFeeAnnuale = scenarioData.saasFee * 12;
  const transactionFeeAnnuale = scenarioData.transactionFeeFixed * annualReturns;
  const rdvFeeAnnuale = (rdvValue * scenarioData.rdvPercentage) / 100;
  const upsellingFeeAnnuale = (upsellingValue * scenarioData.upsellingPercentage) / 100;
  const totalPlatformCost = saasFeeAnnuale + transactionFeeAnnuale + rdvFeeAnnuale + upsellingFeeAnnuale;
  
  // Calculate NET INCREASE in company revenues (identical to BusinessCase)
  const fatturazioneNettaPreRever = businessCaseData.carrelloMedio * annualReturns;
  const fatturazioneNettaFinale = fatturazioneNettaPreRever + fatturazioneGenerataRever;
  const netRevenuesEcommerce = fatturazioneNettaFinale - totalPlatformCost;
  const aumentoNetRevenues = netRevenuesEcommerce - fatturazioneNettaPreRever;
  
  // Calculate payback using IDENTICAL formula as BusinessCase
  const calculatePayback = () => {
    if (!businessCaseData.carrelloMedio || !annualReturns) {
      return null;
    }

    const netRevenueIncrease = aumentoNetRevenues;
    
    if (netRevenueIncrease <= 0 || totalPlatformCost <= 0) {
      return null;
    }
    
    const paybackMonths = totalPlatformCost / (netRevenueIncrease / 12);
    
    return paybackMonths < 6 ? paybackMonths : null;
  };

  const paybackMonths = calculatePayback();

  console.log('ReadOnlyPayback Debug:', {
    fatturazioneGenerataRever,
    aumentoNetRevenues,
    totalPlatformCost,
    paybackMonths,
    showPayback: paybackMonths !== null
  });

  // Show if payback exists and is meaningful (identical to BusinessCase logic)
  if (paybackMonths === null) {
    return null;
  }

  return (
    <div className="p-3 rounded-lg border border-green-200" style={{ backgroundColor: '#F2FCF4' }}>
      <div className="flex items-center gap-2">
        <span className="text-sm font-medium" style={{ color: '#00875A' }}>
          ‚è≥ {getTranslation(language, 'estimatedPayback')}: {paybackMonths.toFixed(1)} {getTranslation(language, 'monthsToRecoverInvestment')}
        </span>
      </div>
    </div>
  );
};

export default ReadOnlyPayback;
