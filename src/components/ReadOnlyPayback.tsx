
import React from 'react';
import { getTranslation } from '@/utils/translations';

interface ReadOnlyPaybackProps {
  businessCaseData: {
    resiAnnuali: number;
    resiMensili: number;
    carrelloMedio: number;
  };
  scenarioData: {
    rdvPercentage: number;
    upsellingPercentage: number;
  };
  monthlyTotal: number;
  language: string;
}

const ReadOnlyPayback = ({ businessCaseData, scenarioData, monthlyTotal, language }: ReadOnlyPaybackProps) => {
  // Calculate payback period using the SAME business logic as BusinessCase.tsx
  const annualReturns = businessCaseData.resiAnnuali > 0 ? businessCaseData.resiAnnuali : businessCaseData.resiMensili * 12;
  
  // Calculate RDV revenue (matching BusinessCase exactly)
  const rdvValue = annualReturns * (scenarioData.rdvPercentage / 100) * businessCaseData.carrelloMedio;
  
  // Calculate upselling revenue (matching BusinessCase exactly)
  const upsellingResi = annualReturns * 0.0378;
  const upsellingAOV = businessCaseData.carrelloMedio * 1.3; // 30% increase
  const upsellingValue = upsellingResi * upsellingAOV;
  
  // Net revenue generated by REVER
  const fatturazioneGenerataRever = rdvValue + upsellingValue;
  
  // Total platform cost (annual)
  const annualPlatformCost = monthlyTotal * 12;
  
  // Calculate NET INCREASE in company revenues (matching BusinessCase exactly)
  const fatturazioneNettaPreRever = businessCaseData.carrelloMedio * annualReturns;
  const fatturazioneNettaFinale = fatturazioneNettaPreRever + fatturazioneGenerataRever;
  const netRevenuesEcommerce = fatturazioneNettaFinale - annualPlatformCost;
  const aumentoNetRevenues = netRevenuesEcommerce - fatturazioneNettaPreRever;
  
  // Calculate payback using the SAME formula as BusinessCase (net revenue increase)
  const paybackMonths = aumentoNetRevenues > 0 && annualPlatformCost > 0 
    ? annualPlatformCost / (aumentoNetRevenues / 12) 
    : 0;

  console.log('ReadOnlyPayback Debug:', {
    fatturazioneGenerataRever,
    aumentoNetRevenues,
    annualPlatformCost,
    paybackMonths,
    showPayback: paybackMonths > 0 && paybackMonths < 120
  });

  // Show if payback exists and is meaningful (matching BusinessCase logic)
  if (paybackMonths <= 0 || paybackMonths >= 6) {
    return null;
  }

  return (
    <div className="p-3 rounded-lg border border-green-200" style={{ backgroundColor: '#F2FCF4' }}>
      <div className="flex items-center gap-2">
        <span className="text-sm font-medium" style={{ color: '#00875A' }}>
          ‚è≥ {getTranslation(language, 'estimatedPayback')}: {paybackMonths.toFixed(1)} {getTranslation(language, 'monthsToRecoverInvestment')}
        </span>
      </div>
    </div>
  );
};

export default ReadOnlyPayback;
